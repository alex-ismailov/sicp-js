/* Упражнение 1.28.
Один из вариантов теста Ферма, который невозможно обмануть, называется тест Миллера–Рабина (Miller-Rabin test) &
(Miller 1976; Rabin 1980). Он основан на альтернативной формулировке Малой теоремы Ферма, которая состоит в том, что
если n — простое число, а a — произвольное положительное целое число, меньшее n, то a в n − 1-ой степени равняется 1 по модулю n.
Проверяя простоту числа n методом Миллера–Рабина, мы берем случайное число a < n и возводим его в
(n − 1)-ю степень по модулю n с помощью процедуры expmod. Однако когда в процедуре expmod мы проводим возведение в квадрат,
мы проверяем, не нашли ли мы «нетривиальный квадратный корень из 1 по модулю n», то есть число, не равное 1 или n − 1,
квадрат которого по модулю n равен 1. Можно доказать, что если такой нетривиальный квадратный корень из 1 существует, то
n не простое число. Можно, кроме того, доказать, что если n — нечетное число, не являющееся простым, то по крайней мере для
половины чисел a < n вычисление a ** n−1 с помощью такой процедуры обнаружит нетривиальный квадратный корень из
1 по модулю n (вот почему тест Миллера–Рабина невозможно обмануть). Модифицируйте процедуру expmod так, чтобы она
сигнализировала обнаружение нетривиального квадратного корня из 1, и используйте ее для реализации теста Миллера–Рабина с
помощью процедуры, аналогичной fermat-test. Проверьте свою процедуру на нескольких известных Вам простых и составных числах.
Подсказка: удобный способ заставить expmod подавать особый сигнал — заставить ее возвращать 0. */

const random = (n) => Math.floor(Math.random() * (n - 1)) + 1;
const isEven = (n) => n % 2 === 0;
const square = (x) => x * x;

const trivialTest = (r, m) => {
  if (r === 1 || r === m - 1) {
    return r;
  }
  return square(r) % m === 1
    ? 0
    : r;
};

const expmod = (base, exp, m) => {
  if (exp === 0) {
    return 1;
  }
  return isEven(exp)
    ? square(trivialTest(expmod(base, exp / 2, m), m)) % m
    : (base * expmod(base, exp - 1, m)) % m;
};

const millerRabinTest = (n) => {
  const tryIt = (a) => expmod(a, n - 1, n) === 1;
  return tryIt(random(n));
};

const doMillerRabinTest = (n, times) => {
  if (times === 0) {
    return true;
  }
  return millerRabinTest(n)
    ? doMillerRabinTest(n, times - 1)
    : false;
};

/* testing */
const nums = [5, 8, 31, 97, 101, 85, 103, 107, 111, 109];
nums.forEach((n) => console.log(`isPrime(${n}): ${doMillerRabinTest(n, 5)}`));

console.log('*** carmichaelNums ***');
const carmichaelNums = [561, 1105, 1729, 2465, 2821, 6601, 8911, 41041, 825265];
carmichaelNums.forEach((n) => console.log(`isPrime(${n}): ${doMillerRabinTest(n, 5)}`));
